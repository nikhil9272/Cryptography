/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cryptography;

import static cryptography.GmailUtilities1.receiveEmail;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Store;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author Acer
 */
public class E5 extends javax.swing.JFrame {

    /**
     * Creates new form E5
     */
    public static String a;
    public static String b;
    public static String aaa;
    public static String bbb;
    public E5() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        key1 = new javax.swing.JTextField();
        re1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        enc = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipher = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 500));
        setMinimumSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("receive directly from file");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 260, -1, -1));

        key1.setBackground(new java.awt.Color(0, 0, 0));
        key1.setForeground(new java.awt.Color(255, 255, 255));
        key1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 4));
        getContentPane().add(key1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 60, 290, 40));

        re1.setBackground(new java.awt.Color(0, 0, 0));
        re1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        re1.setForeground(new java.awt.Color(255, 255, 255));
        re1.setText("Receive message and key");
        re1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                re1ActionPerformed(evt);
            }
        });
        getContentPane().add(re1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 210, 340, 40));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Received Encrypted Message");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        enc.setBackground(new java.awt.Color(0, 0, 0));
        enc.setColumns(20);
        enc.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        enc.setForeground(new java.awt.Color(255, 255, 255));
        enc.setRows(5);
        jScrollPane1.setViewportView(enc);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 320, 120));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Decrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, -1, 40));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Decrypted message");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, -1));

        cipher.setBackground(new java.awt.Color(0, 0, 0));
        cipher.setColumns(20);
        cipher.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        cipher.setForeground(new java.awt.Color(255, 255, 255));
        cipher.setRows(5);
        jScrollPane2.setViewportView(cipher);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 310, 130));

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("open encrypted message");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 330, -1, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("choose method to open file");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 330, 40));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Key:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 50, -1));

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Receive wirelssly");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 400, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cryptography/bk.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String str;
        String key;
        int keyLength;
        str = enc.getText();
        key = key1.getText();
        keyLength = key.length();
        System.out.println(keyLength);
        // String encrypted_result = encrypt(str, keyLength);
        String decrypted_result = decrypt(str, keyLength);
        cipher.setText(decrypted_result + "");
    }//GEN-LAST:event_jButton1ActionPerformed
    public static String decrypt(String str, int keyLength) {
        String decrypted = "";
        for (int i = 0; i < str.length(); i++) {
            //stores ascii value of character in the string at index 'i'
            int c = str.charAt(i);
            //decryption logic for uppercase letters
            if (Character.isUpperCase(c)) {
                c = c - (keyLength % 26);
                //if c value deceed the ascii value of 'A' increase it by adding 26(no.of alphabets) to keep in boundaries of ascii values of 'A' and 'Z'
                if (c < 'A') {
                    c = c + 26;
                }
            } //decryption logic for uppercase letters
            else if (Character.isLowerCase(c)) {
                c = c - (keyLength % 26);
                //if c value deceed the ascii value of 'A' increase it by adding 26(no.of alphabets) to keep in boundaries of ascii values of 'A' and 'Z'
                if (c < 'a') {
                    c = c + 26;
                }
            }
            //concatinate the decrypted characters/strings
            decrypted = decrypted + (char) c;
        }
        return decrypted;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser c = new JFileChooser();

        //int rVal = c.showOpenDialog(E5.this);
        //if (rVal == JFileChooser.APPROVE_OPTION) {
        //E5.this.setVisible(false);
        c.showOpenDialog(null);
        File f = c.getSelectedFile();
        String filename = f.getAbsolutePath();
        try {
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            String content = readFile(filename, StandardCharsets.UTF_8);
            System.out.println(content);
            String a1 = StringUtils.substringBetween(content, "Encrypted Message:", "Key:");
            //enc.read(br, null); ye directly read krvane ke liye file ko and usko store krvane ke liye enc textfield me
            enc.setText(a1);
            String b1 = StringUtils.substringAfter(content, "Key:");
            key1.setText(b1);
            br.close();
            enc.requestFocus();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }
//            if (rVal == JFileChooser.CANCEL_OPTION) {
//                filename1.setText("You pressed cancel");
//                //dir.setText("");
//            }
    }//GEN-LAST:event_jButton2ActionPerformed

    static String readFile(String path, Charset encoding)
            throws IOException {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new E11().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void re1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_re1ActionPerformed
        String pop3Host = "pop.gmail.com";//change accordingly
        String mailStoreType = "pop3";
        final String userName = "chakravyuh222@gmail.com";//change accordingly
        final String password = "nikhilhello123";//change accordingly

        //call receiveEmail
        receiveEmail(pop3Host, mailStoreType, userName, password);
        enc.setText(a);
        key1.setText(b);
        System.out.println(b.length());
    }//GEN-LAST:event_re1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String pop3Host = "pop.gmail.com";//change accordingly
        String mailStoreType = "pop3";
        final String userName = "chakravyuh222@gmail.com";//change accordingly
        final String password = "nikhilhello123";//change accordingly
        
        //call receiveEmail
        receiveEmail1(pop3Host, mailStoreType, userName, password);
        enc.setText(aaa);
        key1.setText(bbb);
    }//GEN-LAST:event_jButton4ActionPerformed
    public static void receiveEmail1(String pop3Host,
    String mailStoreType, String userName, String password){
    //Set properties
    Properties props = new Properties();
    props.put("mail.store.protocol", "pop3");
    props.put("mail.pop3.host", pop3Host);
    props.put("mail.pop3.port", "995");
    props.put("mail.pop3.starttls.enable", "true");
 
    // Get the Session object.
    Session session = Session.getInstance(props);
 
    try {
        //Create the POP3 store object and connect to the pop store.
	Store store = session.getStore("pop3s");
	store.connect(pop3Host, userName, password);
 
	//Create the folder object and open it in your mailbox.
	Folder emailFolder = store.getFolder("INBOX");
	emailFolder.open(Folder.READ_ONLY);
 
	//Retrieve the messages from the folder object.
	Message[] messages = emailFolder.getMessages();
	System.out.println("Total Message" + messages.length);
 
	//Iterate the messages
	for (int i = 0; i < messages.length; i++) {
	   Message message = messages[i];
	   Address[] toAddress = 
             message.getRecipients(Message.RecipientType.TO);
	     System.out.println("---------------------------------");  
	     System.out.println("Details of Email Message " 
                                                   + (i + 1) + " :");  
	     System.out.println("Subject: " + message.getSubject());  
	     System.out.println("From: " + message.getFrom()[0]);  
 
	     //Iterate recipients 
	     System.out.println("To: "); 
	     for(int j = 0; j < toAddress.length; j++){
	       System.out.println(toAddress[j].toString());
	     }
 
	     //Iterate multiparts
	     Multipart multipart = (Multipart) message.getContent();
	     for(int k = 1; k > 0; k--){
	       BodyPart bodyPart = multipart.getBodyPart(k);  
	       InputStream stream = 
                             (InputStream) bodyPart.getInputStream();  
	       BufferedReader br = 
	    	   new BufferedReader(new InputStreamReader(stream));  
 
	        String rc;
                        String bb = "";
                        while ((rc = br.readLine()) != null) {
                       
                            bb = bb + rc ;
                        }
                         aaa=StringUtils.substringBetween(bb, "Encrypted Message:", "Key:");
                         bbb=StringUtils.substringAfter(bb, "Key:");
	      }  
	   }
 
	   //close the folder and store objects
	   emailFolder.close(false);
	   store.close();
	} catch (NoSuchProviderException e) {
		e.printStackTrace();
	} catch (MessagingException e){
		e.printStackTrace();
	} catch (Exception e) {
	       e.printStackTrace();
	}
 
    }
    public static void receiveEmail(String pop3Host,
            String mailStoreType, String userName, String password) {
        //Set properties
        Properties props = new Properties();
        props.put("mail.store.protocol", "pop3");
        props.put("mail.pop3.host", pop3Host);
        props.put("mail.pop3.port", "995");
        props.put("mail.pop3.starttls.enable", "true");

        // Get the Session object.
        Session session = Session.getInstance(props);

        try {
            //Create the POP3 store object and connect to the pop store.
            Store store = session.getStore("pop3s");
            store.connect(pop3Host, userName, password);

            //Create the folder object and open it in your mailbox.
            Folder emailFolder = store.getFolder("INBOX");
            emailFolder.open(Folder.READ_ONLY);

            //Retrieve the messages from the folder object.
            Message[] messages = emailFolder.getMessages();
            System.out.println("Total Message" + messages.length);

            //Iterate the messages
            for (int i = 0; i < messages.length; i++) {
                Message message = messages[i];
                Address[] toAddress
                        = message.getRecipients(Message.RecipientType.TO);
                System.out.println("---------------------------------");
                System.out.println("Details of Email Message "
                        + (i + 1) + " :");
                System.out.println("Subject: " + message.getSubject());
                System.out.println("From: " + message.getFrom()[0]);

                //Iterate recipients 
                System.out.println("To: ");
                for (int j = 0; j < toAddress.length; j++) {
                    System.out.println(toAddress[j].toString());
                }

                //Iterate multiparts
                Object content = message.getContent();
                if (content instanceof String) {
                    String body = (String) content;
                    System.out.println(body);
                    a = StringUtils.substringBetween(body, "Encrypted Message:", "Key:");
                    b = StringUtils.substringBetween(body, "Key:", "\r\n");

                }
            }

            //close the folder and store objects
            emailFolder.close(false);
            store.close();
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        } catch (MessagingException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(E5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(E5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(E5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(E5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new E5().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea cipher;
    private javax.swing.JTextArea enc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField key1;
    private javax.swing.JButton re1;
    // End of variables declaration//GEN-END:variables
}
